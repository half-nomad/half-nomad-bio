name: üöÄ ÎÖ∏ÏÖò Î∏îÎ°úÍ∑∏ ÎèôÍ∏∞Ìôî (ÏàòÏ†ïÎ≤ÑÏ†Ñ)

# Ìä∏Î¶¨Í±∞ Ï°∞Í±¥ - ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌï¥ ÏàòÎèô Ïã§ÌñâÎßå ÏùºÏãúÏ†ÅÏúºÎ°ú ÌôúÏÑ±Ìôî
on:
  # ÏàòÎèô Ïã§Ìñâ (GitHub Actions ÌÉ≠ÏóêÏÑú)
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÌôúÏÑ±Ìôî'
        required: false
        default: 'true'
        type: boolean
  
  # Ïä§ÏºÄÏ§ÑÎßÅÏùÄ ÌÖåÏä§Ìä∏ ÌõÑ ÌôúÏÑ±Ìôî
  # schedule:
  #   - cron: '0 */2 * * *'  # 2ÏãúÍ∞ÑÎßàÎã§ Ïã§Ìñâ

# ÌôòÍ≤Ω Î≥ÄÏàò
env:
  NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
  NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}

jobs:
  sync-notion-blog:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Ïóê ÌååÏùº Ïì∞Í∏∞ Í∂åÌïú
    
    steps:
      # 1. ÌôòÍ≤Ω Î≥ÄÏàò ÎîîÎ≤ÑÍπÖ
      - name: üîç ÌôòÍ≤Ω Î≥ÄÏàò Ï≤¥ÌÅ¨
        run: |
          echo "=== ÌôòÍ≤Ω Î≥ÄÏàò Ï≤¥ÌÅ¨ ==="
          if [ -z "$NOTION_TOKEN" ]; then
            echo "‚ùå NOTION_TOKENÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
          else
            echo "‚úÖ NOTION_TOKEN ÏÑ§Ï†ïÎê® (Í∏∏Ïù¥: ${#NOTION_TOKEN})"
          fi
          
          if [ -z "$NOTION_DATABASE_ID" ]; then
            echo "‚ùå NOTION_DATABASE_IDÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
          else
            echo "‚úÖ NOTION_DATABASE_ID ÏÑ§Ï†ïÎê®: $NOTION_DATABASE_ID"
          fi
      
      # 2. ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: üì• ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
      
      # 3. Node.js ÏÑ§Ï†ï
      - name: üü¢ Node.js ÏÑ§Ï†ï
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # cache Ï†úÍ±∞ - package-lock.jsonÏù¥ ÏóÜÏúºÎØÄÎ°ú
      
      # 4. ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
      - name: üì¶ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
        run: |
          echo "=== ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò ==="
          npm install
          
          echo "=== ÏÑ§ÏπòÎêú Ìå®ÌÇ§ÏßÄ ÌôïÏù∏ ==="
          npm list
      
      # 5. ÎèôÍ∏∞Ìôî Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
      - name: üìù ÎèôÍ∏∞Ìôî Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
        run: |
          cat > sync-notion.mjs << 'EOF'
          import { Client } from '@notionhq/client';
          import { writeFileSync } from 'fs';

          async function syncNotionBlog() {
            try {
              console.log('üöÄ ÎÖ∏ÏÖò Î∏îÎ°úÍ∑∏ ÎèôÍ∏∞Ìôî ÏãúÏûë...');
              
              // ÌôòÍ≤Ω Î≥ÄÏàò Í≤ÄÏ¶ù
              const token = process.env.NOTION_TOKEN;
              const databaseId = process.env.NOTION_DATABASE_ID;
              
              if (!token) {
                throw new Error('NOTION_TOKENÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
              }
              
              if (!databaseId) {
                throw new Error('NOTION_DATABASE_IDÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
              }
              
              console.log(`üìã Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ID: ${databaseId}`);
              
              // ÎÖ∏ÏÖò ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
              const notion = new Client({ auth: token });
              
              console.log('üîç ÎÖ∏ÏÖò Ïó∞Í≤∞ ÌÖåÏä§Ìä∏...');
              
              // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ïÎ≥¥ Î®ºÏ†Ä Í∞ÄÏ†∏Ïò§Í∏∞ (Ïó∞Í≤∞ ÌÖåÏä§Ìä∏)
              const database = await notion.databases.retrieve({
                database_id: databaseId
              });
              
              console.log(`‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ±Í≥µ: ${database.title[0]?.plain_text || 'Untitled'}`);
              
              // Î∞úÌñâÎêú Ìè¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞
              console.log('üìö Ìè¨Ïä§Ìä∏ Ï°∞Ìöå Ï§ë...');
              const response = await notion.databases.query({
                database_id: databaseId,
                filter: {
                  property: 'Status',
                  select: { equals: 'Published' }
                },
                sorts: [{
                  property: 'Published Date',
                  direction: 'descending'
                }],
                page_size: 10  // ÌÖåÏä§Ìä∏Ïö©ÏúºÎ°ú 10Í∞úÎßå
              });
              
              console.log(`üìä ${response.results.length}Í∞úÏùò Î∞úÌñâÎêú Ìè¨Ïä§Ìä∏ Î∞úÍ≤¨`);
              
              if (response.results.length === 0) {
                console.log('‚ö†Ô∏è Î∞úÌñâÎêú Ìè¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§. StatusÍ∞Ä "Published"Ïù∏ ÌéòÏù¥ÏßÄÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî.');
              }
              
              // Ìè¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
              const posts = [];
              for (let i = 0; i < response.results.length; i++) {
                const page = response.results[i];
                console.log(`üìÑ Ìè¨Ïä§Ìä∏ ${i + 1}/${response.results.length} Ï≤òÎ¶¨ Ï§ë...`);
                
                try {
                  const postData = await transformNotionPage(notion, page);
                  posts.push(postData);
                  console.log(`‚úÖ "${postData.title}" Î≥ÄÌôò ÏôÑÎ£å`);
                } catch (error) {
                  console.error(`‚ùå Ìè¨Ïä§Ìä∏ Î≥ÄÌôò Ïã§Ìå® (${page.id}):`, error.message);
                }
              }
              
              // blog-data.json ÏÉùÏÑ±
              const blogData = {
                posts: posts,
                lastUpdated: new Date().toISOString(),
                version: "1.0.0",
                source: "github-actions",
                syncInfo: {
                  totalProcessed: response.results.length,
                  successfullyConverted: posts.length,
                  databaseId: databaseId
                }
              };
              
              // ÌååÏùº Ï†ÄÏû•
              writeFileSync('blog-data.json', JSON.stringify(blogData, null, 2));
              
              console.log(`‚úÖ blog-data.json ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å!`);
              console.log(`üìä Ï¥ù ${posts.length}Í∞ú Ìè¨Ïä§Ìä∏ ÎèôÍ∏∞ÌôîÎê®`);
              
            } catch (error) {
              console.error('‚ùå ÎèôÍ∏∞Ìôî Ïò§Î•ò:', error);
              console.error('Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§:', error.stack);
              process.exit(1);
            }
          }

          async function transformNotionPage(notion, page) {
            const properties = page.properties;
            
            // Í∏∞Î≥∏ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
            const title = properties.Title?.title?.[0]?.plain_text || 'Untitled';
            const excerpt = properties.Excerpt?.rich_text?.[0]?.plain_text || '';
            const categoryData = properties.Category?.select;
            const category = categoryData?.name?.toLowerCase().replace(/\s+/g, '-') || 'general';
            const categoryName = categoryData?.name || 'General';
            const publishedDate = properties['Published Date']?.date?.start || new Date().toISOString().split('T')[0];
            const readTime = `${properties['Read Time']?.number || 5}Î∂Ñ`;
            const thumbnail = properties.Thumbnail?.rich_text?.[0]?.plain_text || 'üìù';

            console.log(`  Ï†úÎ™©: ${title}`);
            console.log(`  Ïπ¥ÌÖåÍ≥†Î¶¨: ${categoryName}`);
            console.log(`  Î∞úÌñâÏùº: ${publishedDate}`);

            // ÌéòÏù¥ÏßÄ ÏΩòÌÖêÏ∏† Í∞ÄÏ†∏Ïò§Í∏∞
            let content = '';
            try {
              const blocks = await notion.blocks.children.list({
                block_id: page.id,
                page_size: 50  // ÏΩòÌÖêÏ∏†Í∞Ä ÎßéÏúºÎ©¥ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÌïÑÏöî
              });
              
              content = transformBlocksToHTML(blocks.results);
              console.log(`  ÏΩòÌÖêÏ∏† Î∏îÎ°ù Ïàò: ${blocks.results.length}`);
            } catch (error) {
              console.warn(`‚ö†Ô∏è ÌéòÏù¥ÏßÄ ${page.id} ÏΩòÌÖêÏ∏† Î°úÎìú Ïã§Ìå®:`, error.message);
              content = '<p>ÏΩòÌÖêÏ∏†Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.</p>';
            }

            return {
              id: page.id.replace(/-/g, ''),
              notionId: page.id,
              title: title,
              excerpt: excerpt,
              category: category,
              categoryName: categoryName,
              date: publishedDate,
              readTime: readTime,
              thumbnail: thumbnail,
              content: content
            };
          }

          function transformBlocksToHTML(blocks) {
            let html = '';
            
            for (const block of blocks) {
              html += transformBlockToHTML(block);
            }
            
            return html.trim();
          }

          function transformBlockToHTML(block) {
            const type = block.type;
            
            switch (type) {
              case 'paragraph':
                const text = extractRichText(block.paragraph.rich_text);
                return text ? `<p>${text}</p>\n` : '';
                
              case 'heading_1':
                const h1Text = extractRichText(block.heading_1.rich_text);
                return `<h2>${h1Text}</h2>\n`;
                
              case 'heading_2':
                const h2Text = extractRichText(block.heading_2.rich_text);
                return `<h3>${h2Text}</h3>\n`;
                
              case 'heading_3':
                const h3Text = extractRichText(block.heading_3.rich_text);
                return `<h4>${h3Text}</h4>\n`;
                
              case 'bulleted_list_item':
                const liText = extractRichText(block.bulleted_list_item.rich_text);
                return `<li>${liText}</li>\n`;
                
              case 'numbered_list_item':
                const numText = extractRichText(block.numbered_list_item.rich_text);
                return `<li>${numText}</li>\n`;
                
              case 'quote':
                const quoteText = extractRichText(block.quote.rich_text);
                return `<blockquote>${quoteText}</blockquote>\n`;
                
              case 'code':
                const codeText = extractRichText(block.code.rich_text);
                const language = block.code.language || '';
                return `<pre><code class="${language}">${escapeHtml(codeText)}</code></pre>\n`;
                
              case 'divider':
                return '<hr>\n';
                
              default:
                console.log(`‚ö†Ô∏è ÏßÄÏõêÎêòÏßÄ ÏïäÎäî Î∏îÎ°ù ÌÉÄÏûÖ: ${type}`);
                return '';
            }
          }

          function extractRichText(richTextArray) {
            if (!richTextArray || !Array.isArray(richTextArray)) return '';
            
            return richTextArray.map(textObj => {
              let text = textObj.plain_text || '';
              
              // HTML Ïù¥Ïä§ÏºÄÏù¥ÌîÑ
              text = escapeHtml(text);
              
              // Ìè¨Îß∑ÌåÖ Ï†ÅÏö©
              if (textObj.annotations) {
                const { bold, italic, strikethrough, underline, code } = textObj.annotations;
                
                if (code) text = `<code>${text}</code>`;
                if (bold) text = `<strong>${text}</strong>`;
                if (italic) text = `<em>${text}</em>`;
                if (strikethrough) text = `<del>${text}</del>`;
                if (underline) text = `<u>${text}</u>`;
              }
              
              // ÎßÅÌÅ¨ Ï≤òÎ¶¨
              if (textObj.href) {
                text = `<a href="${textObj.href}" target="_blank" rel="noopener">${text}</a>`;
              }
              
              return text;
            }).join('');
          }

          function escapeHtml(text) {
            const map = {
              '&': '&amp;',
              '<': '&lt;',
              '>': '&gt;',
              '"': '&quot;',
              "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, m => map[m]);
          }

          // Ïã§Ìñâ
          syncNotionBlog();
          EOF
      
      # 6. ÎÖ∏ÏÖò ÎèôÍ∏∞Ìôî Ïã§Ìñâ
      - name: üîÑ ÎÖ∏ÏÖò Î∏îÎ°úÍ∑∏ ÎèôÍ∏∞Ìôî Ïã§Ìñâ
        run: |
          echo "=== ÎèôÍ∏∞Ìôî ÏãúÏûë ==="
          node sync-notion.mjs
          
          echo "=== ÏÉùÏÑ±Îêú ÌååÏùº ÌôïÏù∏ ==="
          if [ -f "blog-data.json" ]; then
            echo "‚úÖ blog-data.json ÌååÏùº ÏÉùÏÑ±Îê®"
            echo "üìä ÌååÏùº ÌÅ¨Í∏∞: $(wc -c < blog-data.json) bytes"
            echo "üîç Ï≤´ 10Ï§Ñ ÎØ∏Î¶¨Î≥¥Í∏∞:"
            head -10 blog-data.json
          else
            echo "‚ùå blog-data.json ÌååÏùºÏù¥ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
            exit 1
          fi
      
      # 7. Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã Î∞è Ìë∏Ïãú
      - name: üì§ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã
        run: |
          # Git ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏
          echo "=== Git ÏÉÅÌÉú ÌôïÏù∏ ==="
          git status
          
          if [ -n "$(git status --porcelain)" ]; then
            echo "‚úÖ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Î∞úÍ≤¨ - Ïª§Î∞ã ÏßÑÌñâ"
            git add blog-data.json
            git commit -m "üöÄ ÎÖ∏ÏÖò Î∏îÎ°úÍ∑∏ ÏûêÎèô ÎèôÍ∏∞Ìôî $(date '+%Y-%m-%d %H:%M:%S')"
            
            echo "=== Push ÏãúÎèÑ ==="
            git push
            echo "‚úÖ Î∏îÎ°úÍ∑∏ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å!"
          else
            echo "üìã Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏóÜÏùå - ÎèôÍ∏∞Ìôî Î∂àÌïÑÏöî"
          fi
      
      # 8. Í≤∞Í≥º ÏöîÏïΩ
      - name: üìä ÎèôÍ∏∞Ìôî Í≤∞Í≥º ÏöîÏïΩ
        run: |
          echo "üéâ ÎÖ∏ÏÖò Î∏îÎ°úÍ∑∏ ÎèôÍ∏∞Ìôî ÏôÑÎ£å!"
          echo "üìÖ Ïã§Ìñâ ÏãúÍ∞Ñ: $(date)"
          echo "üîó GitHub Pages: https://half-nomad.github.io/half-nomad-bio/"
          echo "üìÅ ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ ÎÇ¥Ïö©:"
          ls -la
